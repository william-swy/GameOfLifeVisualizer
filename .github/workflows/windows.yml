name: Windows Build

on:
  push:
  pull_request:
  
env:
  name: GameOfLifeVisualizer
  BUILD_DIR: '${{ github.workspace }}/build'

jobs:
  build:
    strategy:
      matrix:
        qt_version: [5.15.0]
        platform: [windows-latest]
        arch: [
            x64,
          ]
        include:
          # x86 is get error (qt cannot be installed)
          # - platform: windows-latest
          #   arch: x86
          #   qtarch: win32_msvc2019
          - platform: windows-latest
            arch: x64
            qtarch: win64_msvc2019_64
      fail-fast: false

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.9
        with:
          cmake-version: "3.18"

      # =========================================================================================================
      - name: Install MSVC compiler
        uses: ilammy/msvc-dev-cmd@v1
        with:
          # 14.1 is for vs2017, 14.2 is vs2019
          toolset: 14.2
          arch: ${{ matrix.arch }}

      # Restore from cache the previously built ports. If cache-miss, download and build vcpkg (aka "bootstrap vcpkg").
      - name: Restore from cache and install vcpkg
        # Download and build vcpkg, without installing any port. If content is cached already, it is a no-op.
        uses: lukka/run-vcpkg@v7
        with:
          # Just install vcpkg for now, do not install any ports in this step yet.
          setupOnly: true
          # Location of the vcpkg submodule in the Git repository.
          vcpkgDirectory: "${{ github.workspace }}/vcpkg"
          # Since the cache must be invalidated when content of the vcpkg.json file changes, let's
          # compute its hash and append this to the computed cache's key.
          appendedCacheKey: ${{ hashFiles( '**/vcpkg_manifest/vcpkg.json' ) }}
          vcpkgTriplet: ${{ matrix.arch }}-windows
          # Ensure the vcpkg artifacts are cached, they are generated in the 'CMAKE_BINARY_DIR/vcpkg_installed' directory.
          additionalCachedPaths: ${{ env.BUILD_DIR }}/vcpkg_installed

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: QtCache-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.qt_version }}
      - name: Installing Qt - ${{ matrix.arch }}
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.qt_version }}
          arch: ${{ matrix.qtarch }}
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
      # =========================================================================================================
      - name: Win-${{ matrix.arch }} - ${{ matrix.qt_version }} - Setup Ninja
        if: matrix.platform == 'windows-latest'
        uses: ashutoshvarma/setup-ninja@master
        with:
          # ninja version to download. Default: 1.10.0
          version: 1.10.0
      # ========================================================================================================= Generate MakeFile and Build
      - name: Win-${{ matrix.arch }} - ${{ matrix.qt_version }} - Generate Dependencies and Build
        shell: powershell
        env:
          CC: cl.exe
          CXX: cl.exe
        # https://stackoverflow.com/questions/31262342/cmake-g-ninja-on-windows-specify-x64?rq=1
        run: |
          Get-PsDrive
          cmake --version
          ninja --version
          cmake -B ${{ env.BUILD_DIR }} -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake"
          cmake --build ${{ env.BUILD_DIR }} --target all --parallel $(nproc)
          ctest --test-dir ${{ env.BUILD_DIR }}
          Get-PsDrive
      - name: If the job has failed
        if: ${{ failure() }}
        run: |
          ls ${{ env.BUILD_DIR }}/build/
          cat ${{ env.BUILD_DIR }}/build/vcpkg-manifest-install.log
      - name: Get Time
        id: time
        uses: nanzm/get-time-action@v1.1
        with:
          timeZone: 8
          format: "YYYY-MM-DD-HH-mm-ss"

      - name: Win-${{ matrix.arch }} - ${{ matrix.qt_version }} - uploading artifact (whole zip)
        uses: actions/upload-artifact@master
        with:
          name: ${{ env.name }}-${{ steps.time.outputs.time }}-${{ steps.vars.outputs.sha_short }}-windows-${{ matrix.arch }}-package
          path: |
            ${{ env.BUILD_DIR }}
            !${{ env.buildDir }}/.cmake
            !${{ env.buildDir }}/CMakeFiles
            !${{ env.buildDir }}/cmake_install.cmake
            !${{ env.buildDir }}/CMakeCache.txt
            !${{ env.buildDir }}/.ninja_deps
            !${{ env.buildDir }}/.ninja_log
            !${{ env.buildDir }}/build.ninja
            !${{ env.buildDir }}/**/*autogen*
            !${{ env.buildDir }}/vcpkg_installed
            !${{ env.buildDir }}/**/*.log
            !${{ env.buildDir }}/*.manifest
            !${{ env.buildDir }}/compile_commands.json